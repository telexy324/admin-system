generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  password       String
  name           String
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  avatar         String?
  status         Int      @default(1)
  approvedLeaves Leave[]  @relation("ApprovedLeaves")
  leaves         Leave[]  @relation("UserLeaves")
  logs           Log[]
  roles          Role[]   @relation("UserRoles")

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  menus       Menu[]       @relation("RoleMenus")
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")

  @@map("roles")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  path        String    // API 路径
  method      String    // HTTP 方法 (GET, POST, PUT, DELETE 等)
  roles       Role[]    @relation("RolePermissions")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([path, method], name: "path_method") // 确保路径和方法的组合是唯一的

  @@map("permissions")
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  path      String
  icon      String?
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  roles     Role[]   @relation("RoleMenus")

  @@map("menus")
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("logs")
}

model LeaveType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  days        Int      @default(0)
  status      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  leaves      Leave[]

  @@map("leave_types")
}

model Leave {
  id         Int       @id @default(autoincrement())
  userId     Int
  typeId     Int
  startDate  DateTime
  endDate    DateTime
  days       Float
  reason     String
  status     Int       @default(0)
  approvedBy Int?
  approvedAt DateTime?
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approver   User?     @relation("ApprovedLeaves", fields: [approvedBy], references: [id])
  type       LeaveType @relation(fields: [typeId], references: [id])
  user       User      @relation("UserLeaves", fields: [userId], references: [id])

  @@map("leaves")
}
