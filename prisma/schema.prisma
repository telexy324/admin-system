generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  password       String
  name           String
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  avatar         String?
  status         Int      @default(1)
  approvedLeaves Leave[]  @relation("ApprovedLeaves")
  leaves         Leave[]  @relation("UserLeaves")
  logs           Log[]
  roles          Role[]   @relation("UserRoles")
  files          Storage[]
  leaveBalances  LeaveBalance[]

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  menus       Menu[]       @relation("RoleMenus")
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")

  @@map("roles")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  path        String    // API 路径
  method      String    // HTTP 方法 (GET, POST, PUT, DELETE 等)
  roles       Role[]    @relation("RolePermissions")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([path, method], name: "path_method") // 确保路径和方法的组合是唯一的

  @@map("permissions")
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  path      String
  icon      String?
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  roles     Role[]   @relation("RoleMenus")

  @@map("menus")
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("logs")
}

model Leave {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  amount     Decimal
  /// status: 1:PENDING, 2:APPROVED, 3:REJECTED, 4:CANCELLED
  status     Int       @default(1)
  /// type: 1:COMPENSATE, 2:ANNUAL, 3:SICK, 4:PERSONAL, 5:OTHER
  type       Int       @default(1)
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")
  reason     String
  /// one-to-many: Leave has many Storage
  proof     Storage[]
  /// many-to-one: Leave belongs to one user
  userId     Int
  user       User      @relation("UserLeaves", fields: [userId], references: [id])
  /// many-to-one: Leave has one approver
  approverId Int?
  approver   User?      @relation("ApprovedLeaves", fields: [approverId], references: [id])
  comment    String?
  doneAt     DateTime? @map("done_at")
  leaveBalances LeaveBalance[]

  @@map("leave")
}


model Storage {
  id          Int      @id @default(autoincrement())
  name        String   // 原始文件名
  key         String   @unique // 存储的文件名（UUID）
  url         String   // 文件访问URL
  size        Int      // 文件大小（字节）
  type        String   // 文件MIME类型
  storageType String   // 存储类型（local/supabase）
  bucket      String?  // 存储桶名称（用于云存储）
  userId      Int?     // 上传用户ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  leaveId     Int?       // ✅ 可选的关联
  leave       Leave?     @relation(fields: [leaveId], references: [id]) // ✅ 反向关联 leave.proof

  @@map("storages")
}

model LeaveBalance {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       Int       @default(1) // type: 1:COMPENSATE, 2:ANNUAL, 3:SICK, 4:PERSONAL, 5:OTHER
  amount     Decimal   // decimal with precision 10, scale 2
  year       Int?      @default(0) // 年度，默认 0，可为空
  action     Int       @default(1) // action: 1:REQUEST, 2:CANCEL
  userId     Int
  leaveId    Int
  user       User      @relation(fields: [userId], references: [id])
  leave      Leave     @relation(fields: [leaveId], references: [id])

  @@map("leave_balance") // 映射到原始表名
}